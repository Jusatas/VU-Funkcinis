view
END
view;
mutate TATATATGGG 75;
concat GT G;
BEGIN
:paste
END
mutate TTATATG 75
concat GT T
:paste
concat GGG
BEGIN
:paste
con
BEGIND
:paste
view
END
view;
concat GG A;
complement AAAAAAA;
BEGIN
:paste
view
BEGIN concat CG G; complement G; mutate CCCGGAGAT 75; END
:paste
view
BEGIN concat CG G; complement G; mutate CCCGGAGAT 75; END
concat CGT T
END
complement GT;
concat CG G;
BEGIN
:paste
view
concat G T
cconcat G T
BEGIN concat G T END
BEGIN concat G T END
:paste
concat G T
:paste
END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
            Left err -> Left err
                else Left "Extra characters after statement"
                then Right (Single query, "")
                if null (dropWhile isWhitespace trimmedInput)
                -- Ensure the rest of the input is consumed
            Right query -> 
        in case Lib2.parseQuery trimmedInput of
        let trimmedInput = dropWhile isWhitespace input
    | otherwise =
    | take 5 input == "BEGIN" = parseBatch (drop 5 input)
parseStatements input
parseStatements :: String -> Either String (Statements, String)
:paste
END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
view
load
view
view
vview
view
vview
load
view
load
load
view
load
END
concat CCCC T;
concat GT A;
BEGIN
:paste
concat GG A;
concat CGT T;
