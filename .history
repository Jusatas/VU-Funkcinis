END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
            Left err -> Left err
                else Left "Extra characters after statement"
                then Right (Single query, "")
                if null (dropWhile isWhitespace trimmedInput)
                -- Ensure the rest of the input is consumed
            Right query -> 
        in case Lib2.parseQuery trimmedInput of
        let trimmedInput = dropWhile isWhitespace input
    | otherwise =
    | take 5 input == "BEGIN" = parseBatch (drop 5 input)
parseStatements input
parseStatements :: String -> Either String (Statements, String)
:paste
END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
END
    complement last;
    mutate last 5;
    concat last testSeq;
    createSeq GCTA testSeq;
    createSeq ATGC last;
BEGIN
:paste
view
load
view
view
vview
view
vview
load
view
load
load
view
load
END
concat CCCC T;
concat GT A;
BEGIN
:paste
concat GG A;
concat CGT T;
:paste
transcribe A;
complement G;
concat GGT G;
:paste
concat GGT G; complement G; transcribe A;
:paste
view
deleteSeq fs;
createSeq TTT fs;
:paste
createSeq TTTTTT fs
:paste
deleteSeq tr\ndeleteSeq tr
deleteSeq tr
view
deleteSeq tr
createSeq CA tr
:paste
view
load
view
view
view
:paste
view
createSeq ATATATAATATATGGGGGGGGGGGGGGGG labas
concat G T
:paste
createSeq CACA testingCreate;
:paste
END
createSeq CACAC testingcreate;
BEGIN
:paste
END
createSeq CACAC testingcreate
BEGIN
:paste
END
createSeq GAGA testingcreate
concat AAAA T
BEGIN
